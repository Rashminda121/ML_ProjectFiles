% Load and preprocess combined-domain datasets
fileNames = {'Acc_TimeD_FreqD_FDay.mat', 'Acc_TimeD_FreqD_MDay.mat'};
userData = struct();

% Loop through users and datasets to load data
for userID = 1:10
    for datasetIdx = 1:2
        fileName = sprintf('U%02d_%s', userID, fileNames{datasetIdx});
        if exist(fileName, 'file')
            loadedData = load(fileName);
            fieldName = sprintf('U%02d_%s', userID, fileNames{datasetIdx}(1:end-4));
            userData.(fieldName) = loadedData;
        else
            warning('File %s does not exist!', fileName);
        end
    end
end

% Prepare the data for training and testing
X = [];
Y = [];
for userID = 1:10
    for datasetIdx = 1:2
        datasetName = fileNames{datasetIdx}(1:end-4);
        fieldName = sprintf('U%02d_%s', userID, datasetName);
        if isfield(userData, fieldName)
            featureField = 'Acc_TDFD_Feat_Vec';
            data = userData.(fieldName).(featureField);
            X = [X; data];
            Y = [Y; repmat(userID, size(data, 1), 1)];
        end
    end
end

% Define the fields and initialize storage for calculations
datasetFieldsTimeFreq = {'Acc_TimeD_FreqD_FDay', 'Acc_TDFD_Feat_Vec'; 
                     'Acc_TimeD_FreqD_MDay', 'Acc_TDFD_Feat_Vec'};
meanTimeFreqValues = zeros(10, 2);
intraTimeFreqVarianceValues = zeros(10, 2);
interTimeFreqVarianceValues = zeros(2, 1);

% Feature calculation for mean, intra-variance, and inter-variance
for userID = 1:10
    for datasetIdx = 1:2
        datasetName = datasetFieldsTimeFreq{datasetIdx, 1};
        fieldName = sprintf('U%02d_%s', userID, datasetName);
        if isfield(userData, fieldName)
            featureField = datasetFieldsTimeFreq{datasetIdx, 2};
            data = userData.(fieldName).(featureField);

            meanData = mean(data, 1);
            meanTimeFreqValues(userID, datasetIdx) = mean(meanData);

            intraVariance = var(data, 0, 1);
            intraTimeFreqVarianceValues(userID, datasetIdx) = mean(intraVariance);

            allData = [];
            for otherUserID = 1:10
                otherFieldName = sprintf('U%02d_%s', otherUserID, datasetName);
                if isfield(userData, otherFieldName)
                    otherData = userData.(otherFieldName).(featureField);
                    allData = [allData; otherData];
                end
            end
            interVariance = var(allData, 0, 1);
            interTimeFreqVarianceValues(datasetIdx) = mean(interVariance);
        end
    end
end

% Plot the results for Time-Freq-Based Data
figure;

% Plot Mean Values for Time-Freq-Based Data
subplot(3, 1, 1);
bar(meanTimeFreqValues);
title('Mean Values for Time-Based Data (Each User and Dataset)');
xlabel('User ID');
ylabel('Mean');
legend(datasetFieldsTimeFreq(:,1), 'Location', 'best');

% Plot Intra-Variance Values for Time-Freq-Based Data
subplot(3, 1, 2);
bar(intraTimeFreqVarianceValues);
title('Intra Variance for Time-Freq-Based Data (Each User and Dataset)');
xlabel('User ID');
ylabel('Intra Variance');
legend(datasetFieldsTimeFreq(:,1), 'Location', 'best');

% Plot Inter-Variance Values for Time-Freq-Based Data
subplot(3, 1, 3);
bar(interTimeFreqVarianceValues);
title('Inter Variance for Time-Freq-Based Data (Across All Users)');
xlabel('Dataset');
ylabel('Inter Variance');
xticks(1:2);
xticklabels(datasetFieldsTimeFreq(:,1));
legend('Inter Variance', 'Location', 'best');

% Add random noise to the data
noiseLevel = 0.5; 
X = X + noiseLevel * randn(size(X));

% Normalize the data
% X = normalize(X, 'range'); 

% Split the data into training and testing sets
cv = cvpartition(Y, 'HoldOut', 0.3);
XTrain = X(training(cv), :);
YTrain = Y(training(cv), :);
XTest = X(test(cv), :);
YTest = Y(test(cv), :);

% Shuffle the labels to make the problem nonsensical
YTrain = YTrain(randperm(length(YTrain)));
YTest = YTest(randperm(length(YTest)));

% Convert labels to one-hot encoding
YTrainOneHot = full(ind2vec(YTrain'));
YTestOneHot = full(ind2vec(YTest'));

% Create and configure the neural network
hiddenLayerSize = 2; 
net = feedforwardnet(hiddenLayerSize);

% Set a high learning rate
net.trainParam.lr = 0.1;

% Remove validation data from network configuration
net.divideParam.trainRatio = 0.7; 
net.divideParam.valRatio = 0.0;   
net.divideParam.testRatio = 0.3;

% Train the neural network
[net, tr] = train(net, XTrain', YTrainOneHot);

% Plot training performance
figure;
plotperform(tr);

% Test the network
YPred = net(XTest');
YPredLabels = vec2ind(YPred);

% Calculate accuracy
accuracy = sum(YPredLabels' == YTest) / length(YTest);
fprintf('Test Accuracy: %.2f%%\n', accuracy * 100);
