% Load and preprocess frequency datasets
fileNames = {'Acc_FreqD_FDay.mat', 'Acc_FreqD_MDay.mat'};
userData = struct();

% Loop through users and datasets to load data
for userID = 1:10
    for datasetIdx = 1:2
        fileName = sprintf('U%02d_%s', userID, fileNames{datasetIdx});
        if exist(fileName, 'file')
            loadedData = load(fileName);
            fieldName = sprintf('U%02d_%s', userID, fileNames{datasetIdx}(1:end-4));
            userData.(fieldName) = loadedData;
        else
            warning('File %s does not exist!', fileName);
        end
    end
end

% Define the fields and initialize storage for calculations
datasetFieldsFreq = {'Acc_FreqD_FDay', 'Acc_FD_Feat_Vec'; 
                     'Acc_FreqD_MDay', 'Acc_FD_Feat_Vec'};
meanFreqValues = zeros(10, 2);  
intraFreqVarianceValues = zeros(10, 2);
interFreqVarianceValues = zeros(2, 1);

% Feature calculation for mean, intra-variance, and inter-variance
for userID = 1:10
    for datasetIdx = 1:2
        datasetName = datasetFieldsFreq{datasetIdx, 1};
        fieldName = sprintf('U%02d_%s', userID, datasetName);
        if isfield(userData, fieldName)
            featureField = datasetFieldsFreq{datasetIdx, 2};
            data = userData.(fieldName).(featureField);

            meanData = mean(data, 1);
            meanFreqValues(userID, datasetIdx) = mean(meanData);

            intraVariance = var(data, 0, 1);
            intraFreqVarianceValues(userID, datasetIdx) = mean(intraVariance);

            allData = [];
            for otherUserID = 1:10
                otherFieldName = sprintf('U%02d_%s', otherUserID, datasetName);
                if isfield(userData, otherFieldName)
                    otherData = userData.(otherFieldName).(featureField);
                    allData = [allData; otherData];
                end
            end
            interVariance = var(allData, 0, 1);
            interFreqVarianceValues(datasetIdx) = mean(interVariance);
        end
    end
end

% Plot the results for Frequency Data
figure;

% Plot Mean Values for Frequency Data
subplot(3, 1, 1);
bar(meanFreqValues);
title('Mean Values for Frequency Data (Each User and Dataset)');
xlabel('User ID');
ylabel('Mean');
legend(datasetFieldsFreq(:,1), 'Location', 'best');

% Plot Intra-Variance Values for Frequency Data
subplot(3, 1, 2);
bar(intraFreqVarianceValues);
title('Intra Variance for Frequency Data (Each User and Dataset)');
xlabel('User ID');
ylabel('Intra Variance');
legend(datasetFieldsFreq(:,1), 'Location', 'best');

% Plot Inter-Variance Values for Frequency Data
subplot(3, 1, 3);
bar(interFreqVarianceValues);
title('Inter Variance for Frequency Data (Across All Users)');
xlabel('Dataset');
ylabel('Inter Variance');
xticks(1:2);
xticklabels(datasetFieldsFreq(:,1));
legend('Inter Variance', 'Location', 'best');



% Build feature matrix and labels
featureMatrix = [];
labels = [];
for userID = 1:10
    for datasetIdx = 1:2
        meanData = meanFreqValues(userID, datasetIdx);
        intraVariance = intraFreqVarianceValues(userID, datasetIdx);
        interVariance = interFreqVarianceValues(datasetIdx);

        featureVector = [meanData, intraVariance, interVariance];
        featureMatrix = [featureMatrix; featureVector];
        labels = [labels; userID];
    end
end

% Standardize features
featureMatrix = zscore(featureMatrix);

% Feature selection using LASSO
[B, FitInfo] = lasso(featureMatrix, labels, 'CV', 10);
selectedFeatures = B(:, FitInfo.IndexMinMSE) ~= 0;
featureMatrixSelected = featureMatrix(:, selectedFeatures);

% PCA for dimensionality reduction
[coeff, pcaFeatureMatrix, ~, ~, explained] = pca(featureMatrixSelected);
figure; pareto(explained);
title('Explained Variance for Each Principal Component');

explainedVariance = cumsum(explained);
numComponents = find(explainedVariance >= 99, 1);
pcaFeatureMatrix = pcaFeatureMatrix(:, 1:numComponents);

% Cross-validation setup
k = 5;
cv = cvpartition(length(labels), 'KFold', k);
accuracies = zeros(k, 1);

% Neural network configuration
hiddenLayerSizes = [5, 3, 5];
net = feedforwardnet(hiddenLayerSizes, 'trainlm');
net.layers{1}.transferFcn = 'poslin';
net.layers{2}.transferFcn = 'poslin';
net.layers{end}.transferFcn = 'softmax';

net.trainParam.epochs = 2000;
net.trainParam.min_grad = 1e-8;
net.trainParam.max_fail = 10;
net.trainParam.lr = 0.01; 
net.performParam.regularization = 0.001; 
net.divideParam.valRatio = 0.0;
net.trainParam.showWindow = false;

% Training and evaluation
for fold = 1:k
    trainInd = training(cv, fold);
    testInd = test(cv, fold);

    trainData = pcaFeatureMatrix(trainInd, :);
    trainLabels = full(ind2vec(labels(trainInd)'));
    testData = pcaFeatureMatrix(testInd, :);
    testLabels = labels(testInd);

    net = configure(net, trainData', trainLabels);
    [net, tr] = train(net, trainData', trainLabels);

    predictions = net(testData');
    [~, predictedClasses] = max(predictions, [], 1);

    accuracies(fold) = sum(predictedClasses' == testLabels) / length(testLabels);
end

meanAccuracy = mean(accuracies);
fprintf('Mean Accuracy across %d folds: %.2f%%\n', k, meanAccuracy * 100);

% Plot training performance
figure;plotperform(tr);