% Load and preprocess time datasets
fileNames = {'Acc_TimeD_FDay.mat', 'Acc_TimeD_MDay.mat'};
userData = struct();

% Loop through users and datasets to load data
for userID = 1:10
    for datasetIdx = 1:2
        fileName = sprintf('U%02d_%s', userID, fileNames{datasetIdx});
        if exist(fileName, 'file')
            loadedData = load(fileName);
            fieldName = sprintf('U%02d_%s', userID, fileNames{datasetIdx}(1:end-4));
            userData.(fieldName) = loadedData;
        else
            warning('File %s does not exist!', fileName);
        end
    end
end

% Define the fields and initialize storage for calculations
datasetFieldsTime = {'Acc_TimeD_FDay', 'Acc_TD_Feat_Vec'; 
                     'Acc_TimeD_MDay', 'Acc_TD_Feat_Vec'};
meanTimeValues = zeros(10, 2);  
intraTimeVarianceValues = zeros(10, 2);
interTimeVarianceValues = zeros(2, 1);

% Feature calculation for mean, intra-variance, and inter-variance
for userID = 1:10
    for datasetIdx = 1:2
        datasetName = datasetFieldsTime{datasetIdx, 1};
        fieldName = sprintf('U%02d_%s', userID, datasetName);
        if isfield(userData, fieldName)
            featureField = datasetFieldsTime{datasetIdx, 2};
            data = userData.(fieldName).(featureField);

            meanData = mean(data, 1);
            meanTimeValues(userID, datasetIdx) = mean(meanData);

            intraVariance = var(data, 0, 1);
            intraTimeVarianceValues(userID, datasetIdx) = mean(intraVariance);

            allData = [];
            for otherUserID = 1:10
                otherFieldName = sprintf('U%02d_%s', otherUserID, datasetName);
                if isfield(userData, otherFieldName)
                    otherData = userData.(otherFieldName).(featureField);
                    allData = [allData; otherData];
                end
            end
            interVariance = var(allData, 0, 1);
            interTimeVarianceValues(datasetIdx) = mean(interVariance);
        end
    end
end

% Plot the results for Time Data
figure;

% Define unique custom colors for each bar graph
colorsMean = [0.2 0.7 0.5;  % Green
              0.6 0.4 0.8]; % Purple
colorsIntra = [0.8 0.3 0.3;  % Red
               0.3 0.6 0.9]; % Blue
colorsInter = [0.4 0.4 0.8;  % Dark Blue
               0.9 0.7 0.3]; % Yellow

% Plot Mean Values for Time Data
subplot(3, 1, 1);
b1 = bar(meanTimeValues);
title('Mean Values for Time Data (For Each User)');
xlabel('User Number');
ylabel('Mean');
legend(datasetFieldsTime(:,1), 'Location', 'best');
for k = 1:numel(b1)
    b1(k).FaceColor = 'flat';
    b1(k).CData = colorsMean(k, :); % Apply colors to each bar group
end

% Plot Intra-Variance Values for Time Data
subplot(3, 1, 2);
b2 = bar(intraTimeVarianceValues);
title('Intra Variance for Time Data (For Each User)');
xlabel('User Number');
ylabel('Intra Variance');
legend(datasetFieldsTime(:,1), 'Location', 'best');
for k = 1:numel(b2)
    b2(k).FaceColor = 'flat';
    b2(k).CData = colorsIntra(k, :); % Apply colors to each bar group
end

% Plot Inter-Variance Values for Time Data
subplot(3, 1, 3);
b3 = bar(interTimeVarianceValues);
title('Inter Variance for Time Data (Comparing All 10 Users With Each Other)');
xlabel('Dataset');
ylabel('Inter Variance');
xticks(1:2);
xticklabels(datasetFieldsTime(:,1));
legend('Inter Variance', 'Location', 'best');
for k = 1:numel(b3)
    b3(k).FaceColor = 'flat';
    b3(k).CData = colorsInter(k, :); % Apply colors to each dataset
end

% Prepare the data for training and testing
X = [];
Y = [];
for userID = 1:10
    for datasetIdx = 1:2
        datasetName = datasetFieldsTime{datasetIdx, 1};
        fieldName = sprintf('U%02d_%s', userID, datasetName);
        if isfield(userData, fieldName)
            featureField = datasetFieldsTime{datasetIdx, 2};
            data = userData.(fieldName).(featureField);
            X = [X; data];
            Y = [Y; repmat(userID, size(data, 1), 1)];
        end
    end
end

% Normalize the features
X = normalize(X, 'range');

% Split the data into training and testing sets
cv = cvpartition(Y, 'HoldOut', 0.3);
XTrain = X(training(cv), :);
YTrain = Y(training(cv), :);
XTest = X(test(cv), :);
YTest = Y(test(cv), :);

% Convert labels to one-hot encoding
YTrainOneHot = full(ind2vec(YTrain'));
YTestOneHot = full(ind2vec(YTest'));

% Create and configure the neural network
hiddenLayerSize = 10; % Adjust based on experimentation
net = feedforwardnet(hiddenLayerSize);

% Configure the training parameters
net.trainParam.epochs = 1000;  
net.trainParam.lr = 0.1;    
net.divideParam.valRatio = 0.0; 
net.trainParam.goal = 1e-5;   
net.trainParam.max_fail = 3; 
net.performParam.regularization = 0.001; 
% Train the neural network
net = train(net, XTrain', YTrainOneHot);

% Test the network
YPred = net(XTest');
YPredLabels = vec2ind(YPred);

% Calculate accuracy
accuracy = sum(YPredLabels' == YTest) / length(YTest);
fprintf('Test Accuracy: %.2f%%\n', accuracy * 100);